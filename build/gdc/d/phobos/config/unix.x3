x3_out_text(""
    "module gcc.config.unix;\n"
    "private import gcc.config.config;\n"
    "private import gcc.config.libc;\n");

x3_gi_push_header("\"config.h\"");
x3_gi_push_header("<sys/types.h>"); // pretty much need this..

int pop_count = 0;
X3_Int dummy_int;
X3_Type dummy_type;


x3_gi_push_header("<dirent.h>");
x3_gi_push_header("<sys/types.h>");
x3_out_struct("struct dirent", NULL, "c:d_name", "o:d_type", NULL);
x3_out_type_ex("DIR", NULL, "void");

x3_push_optional(1);
x3_out_enum(NULL, NULL, "^DT_[^_].*", NULL);
x3_pop_optional();

x3_gi_pop_headers(2);

x3_gi_push_header("<unistd.h>");

x3_gi_push_header("<limits.h>");
x3_out_int_value("PATH_MAX");
x3_gi_pop_header();

x3_gi_push_header("<sys/types.h>");
{
    if (! x3_query_int_value("NFDBITS", "int", & dummy_int, & dummy_type)) {
        /* for AIX */
        ++pop_count;
        x3_gi_push_header("<sys/select.h>");
    }
    x3_out_int_value("NFDBITS");
    x3_out_int_value("FD_SETSIZE");

    //x3_out_int_value_ex("__FD_SET_SIZEOF", "sizeof(fd_set)", "int", "int", 0);
    x3_out_type("fd_set");
    x3_out_int_type("mode_t");
    x3_out_int_type("pid_t");
    x3_out_int_type("uid_t");
    x3_out_int_type("gid_t");
    x3_out_int_type("off_t");
    x3_out_int_type("ssize_t");
}
x3_gi_pop_headers(pop_count);

x3_gi_push_header("<fcntl.h>");
x3_out_enum(NULL, NULL, "^O_[^_].*", NULL);
x3_out_enum(NULL, NULL, "^F_[^_].*", "-^F_OK$", NULL);
x3_out_enum(NULL, NULL, "^[FWRX]_OK$", NULL);
x3_gi_pop_header();

{
    x3_gi_push_header("<time.h>");

    pop_count = 0;
    x3_gi_push_header("<sys/time.h>");
    if (x3_compile_test())
        ++pop_count;
    else
        x3_gi_pop_header();

    x3_gi_push_header("<sys/time.h>");

    x3_out_struct("struct timespec", NULL, "i:tv_sec", "i:tv_nsec", NULL);
    x3_out_struct("struct timeval", NULL, "i:tv_sec", "i:tv_usec", NULL);
    x3_out_struct("struct timezone", "struct_timezone", "i:tz_minuteswest", "i:tz_dsttime", NULL);
    x3_out_type_ex("clockid_t",NULL, "Culong_t");

    x3_gi_pop_headers(pop_count); // sys/time.h
    x3_gi_pop_header();
}

x3_gi_push_header("<utime.h>");
x3_out_struct("struct utimbuf", NULL, "i:actime", "i:modtime", NULL);
x3_gi_pop_header();

x3_gi_push_header("<sys/stat.h>");
x3_out_enum(NULL, NULL, "^S_I.*", NULL);
x3_out_struct("struct stat", "struct_stat", "i:st_dev", "i:st_ino",
    "i:st_mode", "i:st_nlink", "i:st_uid", "i:st_gid", "i:st_rdev",
    "i:st_size", "i:st_blksize", "i:st_blocks", "i:st_atime", "i:st_mtime",
    "i:st_ctime", NULL);
x3_gi_pop_header();

x3_gi_push_header("<signal.h>");
x3_out_enum(NULL, NULL, "^SIG[^_].*", "-^SIGRT.*", NULL);
x3_out_enum(NULL, NULL, "^SA_[^_].*", NULL);
x3_out_type("sigset_t");
x3_out_text("alias extern(C) void function(int) __sighandler_t;\n");
{
    static const char * nm[3] = {"SIG_DFL","SIG_IGN","SIG_ERR"};
    int i;
    for (i = 0; i < 3; i++) {
        x3_out_int_value_ex(nm[i], nm[i], "void *", "__sighandler_t", 1, NULL);
    }
}

x3_out_struct_ex("siginfo_t", NULL, 1, "i:si_signo", "i:si_errno", "i:si_code", NULL);

{
    X3_Struct * s = x3_struct_new_c_name("struct sigaction");
    X3_Field * f;

    s->struct_type.out_name = "sigaction_t";

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sa_handler";
    f->field_type.kind = X3_TYPE_KIND_NAME;
    f->field_type.out_name = "extern(C) void function(int)";

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sa_sigaction";
    f->field_type.kind = X3_TYPE_KIND_NAME;
    f->field_type.out_name = "extern(C) void function(int, siginfo_t *, void *)";

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sa_mask";
    f->field_type.kind = X3_TYPE_KIND_NAME;
    f->field_type.out_name = "sigset_t";

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sa_flags";
    f->flags |= X3_FLAG_INT_TYPE;

    x3_struct_finish(s);
    x3_struct_out(s);
}
x3_gi_pop_header();

//if (x3_query_cpp_if("HAVE_SYS_MMAN"))// why bother?
x3_gi_push_header("<sys/mman.h>");
if (x3_compile_test()) {
    // need a new fuc for expl cast... MAP_FAILED
    //x3_gi_push_optional(1);//? instead of optoelvl?
    x3_out_int_value_ex("MAP_FAILED", NULL, "void *", NULL, 1, NULL);
    x3_out_enum(NULL, NULL, "^PROT_[^_].*", NULL);
    x3_out_enum(NULL, NULL, "^MAP_[^_].*", "-^MAP_FAILED$", NULL);
    if (! x3_query_int_value("MAP_ANONYMOUS", "int", & dummy_int, & dummy_type))
        x3_out_int_value_ex("MAP_ANONYMOUS", "MAP_ANON", "int", "int", 0, NULL);
    if (! x3_query_int_value("MAP_ANON", "int", & dummy_int, & dummy_type))
        x3_out_int_value_ex("MAP_ANON", "MAP_ANONYMOUS", "int", "int", 0, NULL);

    x3_push_optional(1);
    x3_out_enum(NULL, NULL, "^MS_[^_].*", NULL);
    x3_out_enum(NULL, NULL, "^MCL_[^_].*", NULL);
    x3_out_enum(NULL, NULL, "^MREMAP_[^_].*", NULL);
    x3_out_enum(NULL, NULL, "^MADV_[^_].*", NULL);
    x3_out_enum(NULL, NULL, "^MINCORE_[^_].*", NULL);
    x3_pop_optional();

}
x3_gi_pop_header();

x3_gi_push_header("<semaphore.h>");
if (x3_compile_test())
    x3_out_type("sem_t");
x3_gi_pop_header();

x3_gi_push_header("<pthread.h>");
if (x3_compile_test())
{
    x3_out_type("pthread_t");
    x3_out_type("pthread_attr_t");
    x3_out_type("pthread_cond_t");
    x3_out_type("pthread_condattr_t");
    x3_out_type("pthread_mutex_t");
    x3_out_type("pthread_mutexattr_t");
    // other fields?
    x3_out_struct("struct sched_param", NULL, "i:sched_priority", NULL);
    //x3_push_optional(1);
    x3_out_type_ex("pthread_barrier_t", NULL, X3_STRUCT_FALLBACK);
    x3_out_type_ex("pthread_barrierattr_t", NULL, X3_STRUCT_FALLBACK);
    x3_out_type_ex("pthread_rwlock_t", NULL, X3_STRUCT_FALLBACK);
    x3_out_type_ex("pthread_rwlockattr_t", NULL, X3_STRUCT_FALLBACK);
    x3_out_type_ex("pthread_spinlock_t", NULL, X3_STRUCT_FALLBACK);
    //x3_pop_optional();
    x3_out_enum(NULL, NULL, "^PTHREAD_CANCEL_.*", NULL);

}
x3_gi_pop_header();

x3_gi_push_header("<sys/socket.h>");
x3_gi_push_header("<netinet/in.h>");
x3_gi_push_header("<netinet/tcp.h>");

pop_count = 0;
x3_gi_push_header("<netinet6/in6.h>");
if (x3_compile_test())
    pop_count = 1;
else
    x3_gi_pop_header();

x3_gi_push_header("<netdb.h>");

x3_out_type_ex("socklen_t", NULL, "int"); // uint?
x3_out_enum(NULL, NULL, "^SOL_[^_].*", NULL);
x3_out_enum(NULL, NULL, "^SO_[^_].*", NULL);
x3_out_enum(NULL, NULL, "^SOCK_[^_].*", NULL);
x3_out_enum(NULL, NULL, "^MSG_[^_].*", NULL);
x3_out_text("static if (!is(typeof(MSG_NOSIGNAL))) enum { MSG_NOSIGNAL = 0 } // for std/socket.d\n");
x3_gi_push_default_enum("AF_UNSPEC", "AF_IPX", "AF_APPLETALK", "AF_INET6", NULL);
x3_out_enum(NULL, NULL, "^AF_[^_].*", NULL);
x3_gi_pop_items(1);
x3_gi_push_default_enum("PF_UNSPEC", "PF_IPX", "PF_APPLETALK", "PF_INET6", NULL);
x3_out_enum(NULL, NULL, "^PF_[^_].*", NULL);
x3_gi_pop_items(1);
x3_out_struct("struct linger", NULL, "i:l_onoff", "i:l_linger", NULL);

x3_gi_push_default_enum("3", "IPPROTO_GGP", NULL);
x3_gi_push_default_enum("-1", "IPPROTO_IPV6", NULL);
x3_out_enum(NULL, NULL, "^IPPROTO_.*", NULL);
x3_gi_pop_items(2);

x3_gi_push_default_enum("0",
    "IPV6_UNICAST_HOPS", "IPV6_MULTICAST_IF", "IPV6_MULTICAST_HOPS",
    "IPV6_MULTICAST_LOOP", "IPV6_JOIN_GROUP", "IPV6_LEAVE_GROUP", NULL);
x3_out_enum(NULL, NULL, "^IPV6_.*", NULL);
x3_gi_pop_items(1);

x3_out_enum(NULL, "uint", "^INADDR_.*", NULL);
x3_out_text("enum { ADDR_ANY = INADDR_ANY }\n"); // why does Phobos need this?
x3_out_enum(NULL, NULL, "^TCP_.*", NULL);
// or push text ifndef...
//x3_out_enum("f-1;:", NULL,

x3_out_struct("struct in_addr", NULL, "i:s_addr", NULL);
x3_out_struct("struct sockaddr", NULL, "oib:sa_len", "ib:sa_family", "ob:sa_data", NULL);

{
    X3_Struct * s = x3_struct_new_c_name("struct sockaddr_in");
    X3_Field * f;

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sin_len";
    f->flags = X3_FLAG_OPTIONAL|X3_FLAG_INT_TYPE|X3_FLAG_USE_BYTE;
    f->init_expr = "sockaddr_in.sizeof";

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sin_family";
    f->flags = X3_FLAG_INT_TYPE|X3_FLAG_USE_BYTE;
    f->init_expr = "AF_INET";

    x3_struct_add_fields(s, "i:sin_port", "ob:sin_zero", NULL);

    f = x3_struct_new_field(s);
    f->c_name = f->out_name = "sin_addr";
    f->field_type.kind = X3_TYPE_KIND_NAME;
    f->field_type.out_name = "in_addr";

    x3_struct_finish(s);
    x3_struct_out(s);
}


x3_out_struct("struct protoent", NULL, "p_name", "p_aliases", "i:p_proto", NULL);
x3_out_struct("struct servent", NULL, "s_name", "s_aliases", "i:s_port", "s_proto", NULL);
{
    X3_Struct * s = x3_struct_new_c_name("struct hostent");
    x3_struct_add_fields(s, "h_name", "h_aliases", "h_addrtype", "h_length",
        "h_addr_list", NULL);
    x3_struct_add_extra(s, "\n"
        "  char* h_addr()\n"
        "  {\n"
        "      return h_addr_list[0];\n"
        "  }\n");
    x3_struct_out(s);
}
/*//not required for std/socket.d yet
{
    FieldInfo fi[8];
    struct addrinfo rec;
    INT_FIELD(fi[0], ai_flags);
    INT_FIELD(fi[1], ai_family);
    INT_FIELD(fi[2], ai_socktype);
    INT_FIELD(fi[3], ai_protocol);
    INT_FIELD(fi[4], ai_addrlen);
    ADD_FIELD(fi[5], "sockaddr *", ai_addr);
    ADD_FIELD(fi[6], "char *", ai_canonname);
    ADD_FIELD(fi[7], "addrinfo *", ai_next);
    finish_struct(fi, 8, "addrinfo");
}
*/
x3_out_text("struct addrinfo { }\n");

x3_gi_pop_headers(4);
x3_gi_pop_headers(pop_count);

x3_gi_push_header("<pwd.h>");
x3_out_struct("struct passwd", NULL, "pw_name", "pw_passwd", "i:pw_uid", "i:pw_gid",
    "pw_gecos", "pw_dir", "pw_shell",
    "o:pw_change", "o:pw_class", "o:pw_expire", NULL);
x3_gi_pop_header();
