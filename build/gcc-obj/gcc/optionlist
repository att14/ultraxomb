-helpCommonDisplay this information
-help=Common Report Joined--help=<class>	Display descriptions of a specific class of options.  <class> is one or more of optimizers, target, warnings, undocumented, params
-output-pch=C ObjC C++ ObjC++ Joined Separate
-paramCommon Separate--param <param>=<value>	Set parameter <param> to value.  See below for a complete list of parameters
-target-helpCommonAlias for --help=target
-versionCommon
AC ObjC C++ ObjC++ Joined Separate-A<question>=<answer>	Assert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>
AFortran Joined Separate
CC ObjC C++ ObjC++Do not discard comments
CFortran
CCC ObjC C++ ObjC++Do not discard comments in macro expansions
CCFortran
DC ObjC C++ ObjC++ Joined Separate-D<macro>[=<val>]	Define a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1
DFortran Joined Separate
EC ObjC C++ ObjC++ Undocumented
EFortran Undocumented
FC ObjC C++ ObjC++ Joined Separate-F <dir>	Add <dir> to the end of the main framework include path
GCommon Joined Separate UInteger-G<number>	Put global and static data smaller than <number> bytes into a special section (on some targets)
HC ObjC C++ ObjC++Print the name of header files as they are used
HFortran
IC ObjC C++ ObjC++ Joined Separate-I <dir>	Add <dir> to the end of the main include path
ID Joined Separate-I <dir>	Add <dir> to the end of the main include path.
IFortran Joined Separate
JD Joined Separate-J <dir>	Add <dir> to the end of the string import path.
JFortran Joined Separate-J<directory>	Put MODULE files in 'directory'
LanguageC
LanguageC++
LanguageD
LanguageFortran
LanguageLTO
LanguageObjC
LanguageObjC++
MC ObjC C++ ObjC++Generate make dependencies
MFortran
MDC ObjC C++ ObjC++ SeparateGenerate make dependencies and compile
MDFortran Separate
MFC ObjC C++ ObjC++ Joined Separate-MF <file>	Write dependency output to the given file
MFFortran Joined Separate
MGC ObjC C++ ObjC++Treat missing header files as generated files
MGFortran
MMC ObjC C++ ObjC++Like -M but ignore system header files
MMFortran
MMDC ObjC C++ ObjC++ SeparateLike -MD but ignore system header files
MMDFortran Separate
MPC ObjC C++ ObjC++Generate phony targets for all headers
MPFortran
MQC ObjC C++ ObjC++ Joined Separate-MQ <target>	Add a MAKE-quoted target
MQFortran Joined Separate
MTC ObjC C++ ObjC++ Joined Separate-MT <target>	Add an unquoted target
MTFortran Joined Separate
Mask(DEPRECATED_V8_INSNS)
Mask(LITTLE_ENDIAN)
Mask(LONG_DOUBLE_128)
Mask(SPARCLET)
Mask(SPARCLITE)
Mask(V8)
Mask(V9)
OCommon JoinedOrMissing Optimization-O<number>	Set optimization level to <number>
OsCommon OptimizationOptimize for space rather than speed
PC ObjC C++ ObjC++Do not generate #line directives
PFortran
UC ObjC C++ ObjC++ Joined Separate-U<macro>	Undefine <macro>
UFortran Joined Separate
WCommon RejectNegative Var(extra_warnings) WarningThis switch is deprecated; use -Wextra instead
WabiC ObjC C++ ObjC++ LTO Var(warn_abi) WarningWarn about things that will change when compiling with an ABI-compliant compiler
WaddressC ObjC C++ ObjC++ Var(warn_address) WarningWarn about suspicious uses of memory addresses
Waggregate-returnCommon Var(warn_aggregate_return) WarningWarn about returning structures, unions or arrays
WaliasingFortran WarningWarn about possible aliasing of dummy arguments
Walign-commonsFortran WarningWarn about alignment of COMMON blocks
WallC ObjC C++ ObjC++ WarningEnable most warning messages
WallDEnable most warning messages
WallFortran
WampersandFortran WarningWarn about missing ampersand in continued character constants
Warray-boundsCommon Var(warn_array_bounds) WarningWarn if an array is accessed out of bounds
Warray-temporariesFortran WarningWarn about creation of array temporaries
Wassign-interceptObjC ObjC++ Var(warn_assign_intercept) WarningWarn whenever an Objective-C assignment is being intercepted by the garbage collector
WattributesCommon Var(warn_attributes) Init(1) WarningWarn about inappropriate attribute usage
Wbad-function-castC ObjC Var(warn_bad_function_cast) WarningWarn about casting functions to incompatible types
Wbuiltin-macro-redefinedC ObjC C++ ObjC++ WarningWarn when a built-in preprocessor macro is undefined or redefined
Wc++-compatC ObjC Var(warn_cxx_compat) WarningWarn about C constructs that are not in the common subset of C and C++
Wc++0x-compatC++ ObjC++ Var(warn_cxx0x_compat) WarningWarn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 200x
Wcast-alignCommon Var(warn_cast_align) WarningWarn about pointer casts which increase alignment
Wcast-qualC ObjC C++ ObjC++ Var(warn_cast_qual) WarningWarn about casts which discard qualifiers
Wchar-subscriptsC ObjC C++ ObjC++ Var(warn_char_subscripts) WarningWarn about subscripts whose type is \"char\"
Wcharacter-truncationFortran WarningWarn about truncated character expressions
WclobberedC ObjC C++ ObjC++ Var(warn_clobbered) Init(-1) WarningWarn about variables that might be changed by \"longjmp\" or \"vfork\"
WcommentC ObjC C++ ObjC++ WarningWarn about possibly nested block comments, and C++ comments spanning more than one physical line
WcommentsC ObjC C++ ObjC++ WarningSynonym for -Wcomment
WconversionC ObjC C++ ObjC++ Var(warn_conversion) WarningWarn for implicit type conversions that may change a value
WconversionFortran Warning
Wconversion-nullC++ ObjC++ Var(warn_conversion_null) Init(1) WarningWarn for converting NULL from/to a non-pointer type
Wcoverage-mismatchCommon RejectNegative Var(warn_coverage_mismatch) WarningWarn instead of error in case profiles in -fprofile-use do not match
Wctor-dtor-privacyC++ ObjC++ Var(warn_ctor_dtor_privacy) WarningWarn when all constructors and destructors are private
Wdeclaration-after-statementC ObjC Var(warn_declaration_after_statement) WarningWarn when a declaration is found after a statement
WdeprecatedC C++ ObjC ObjC++ Var(warn_deprecated) Init(1) WarningWarn if a deprecated compiler feature, class, method, or field is used
Wdeprecated-declarationsCommon Var(warn_deprecated_decl) Init(1) WarningWarn about uses of __attribute__((deprecated)) declarations
Wdisabled-optimizationCommon Var(warn_disabled_optimization) WarningWarn when an optimization pass is disabled
Wdiv-by-zeroC ObjC C++ ObjC++ Var(warn_div_by_zero) Init(1) WarningWarn about compile-time integer division by zero
Weffc++C++ ObjC++ Var(warn_ecpp) WarningWarn about violations of Effective C++ style rules
Wempty-bodyC ObjC C++ ObjC++ Var(warn_empty_body) Init(-1) WarningWarn about an empty body in an if or else statement
Wendif-labelsC ObjC C++ ObjC++ WarningWarn about stray tokens after #elif and #endif
Wenum-compareC ObjC C++ ObjC++ Var(warn_enum_compare) Init(-1) WarningWarn about comparison of different enum types
WerrorC ObjC C++ ObjC++
WerrorCommon Var(warnings_are_errors)Treat all warnings as errors
WerrorDError out the compiler on warnings
Werror-implicit-function-declarationC ObjC RejectNegative WarningThis switch is deprecated; use -Werror=implicit-function-declaration instead
Werror=Common JoinedTreat specified warning as error
WextraCommon Var(extra_warnings) WarningPrint extra (possibly unwanted) warnings
Wfatal-errorsCommon Var(flag_fatal_errors)Exit on the first error occurred
Wfloat-equalC ObjC C++ ObjC++ Var(warn_float_equal) WarningWarn if testing floating point numbers for equality
WformatC ObjC C++ ObjC++ WarningWarn about printf/scanf/strftime/strfmon format string anomalies
Wformat-contains-nulC ObjC C++ ObjC++ Var(warn_format_contains_nul) WarningWarn about format strings that contain NUL bytes
Wformat-extra-argsC ObjC C++ ObjC++ Var(warn_format_extra_args) WarningWarn if passing too many arguments to a function for its format string
Wformat-nonliteralC ObjC C++ ObjC++ Var(warn_format_nonliteral) WarningWarn about format strings that are not literals
Wformat-securityC ObjC C++ ObjC++ Var(warn_format_security) WarningWarn about possible security problems with format functions
Wformat-y2kC ObjC C++ ObjC++ Var(warn_format_y2k) WarningWarn about strftime formats yielding 2-digit years
Wformat-zero-lengthC ObjC Var(warn_format_zero_length) WarningWarn about zero-length formats
Wformat=C ObjC C++ ObjC++ Joined Warning
Wframe-larger-than=Common RejectNegative Joined UInteger-Wframe-larger-than=<number>	Warn if a function's stack frame requires more than <number> bytes
Wignored-qualifiersC C++ Var(warn_ignored_qualifiers) Init(-1) WarningWarn whenever type qualifiers are ignored.
WimplicitC ObjC C++ ObjC++ Warning
Wimplicit-function-declarationC ObjC Var(warn_implicit_function_declaration) Init(-1) WarningWarn about implicit function declarations
Wimplicit-intC ObjC Var(warn_implicit_int) WarningWarn when a declaration does not specify a type
Wimplicit-interfaceFortran WarningWarn about calls with implicit interface
Wimplicit-procedureFortran WarningWarn about called procedures not explicitly declared
WimportC ObjC C++ ObjC++ Undocumented
Winit-selfC ObjC C++ ObjC++ Var(warn_init_self) WarningWarn about variables which are initialized to themselves
WinlineCommon Var(warn_inline) WarningWarn when an inlined function cannot be inlined
Wint-to-pointer-castC ObjC Var(warn_int_to_pointer_cast) Init(1) WarningWarn when there is a cast to a pointer from an integer of a different size
Wintrinsic-shadowFortran WarningWarn if a user-procedure has the same name as an intrinsic
Wintrinsics-stdFortran WarningWarn on intrinsics not part of the selected standard
Winvalid-offsetofC++ ObjC++ Var(warn_invalid_offsetof) Init(1) WarningWarn about invalid uses of the \"offsetof\" macro
Winvalid-pchC ObjC C++ ObjC++ WarningWarn about PCH files that are found but not used
Wjump-misses-initC ObjC Var(warn_jump_misses_init) Init(-1) WarningWarn when a jump misses a variable initialization
Wlarger-than-Common RejectNegative Joined UInteger Warning Undocumented
Wlarger-than=Common RejectNegative Joined UInteger Warning-Wlarger-than=<number>	Warn if an object is larger than <number> bytes
Wline-truncationFortran WarningWarn about truncated source lines
Wlogical-opC ObjC C++ ObjC++ Var(warn_logical_op) Init(0) Warning Warn when a logical operator is suspiciously always evaluating to true or false
Wlong-longC ObjC C++ ObjC++ Var(warn_long_long) Init(-1) WarningDo not warn about using \"long long\" when -pedantic
WmainC ObjC C++ ObjC++ Var(warn_main) Init(-1) WarningWarn about suspicious declarations of \"main\"
Wmissing-bracesC ObjC C++ ObjC++ Var(warn_missing_braces) WarningWarn about possibly missing braces around initializers
Wmissing-declarationsC ObjC C++ ObjC++ Var(warn_missing_declarations) WarningWarn about global functions without previous declarations
Wmissing-field-initializersC ObjC C++ ObjC++ Var(warn_missing_field_initializers) Init(-1) WarningWarn about missing fields in struct initializers
Wmissing-format-attributeC ObjC C++ ObjC++ Var(warn_missing_format_attribute) WarningWarn about functions which might be candidates for format attributes
Wmissing-include-dirsC ObjC C++ ObjC++ WarningWarn about user-specified include directories that do not exist
Wmissing-noreturnCommon Var(warn_missing_noreturn) WarningWarn about functions which might be candidates for __attribute__((noreturn))
Wmissing-parameter-typeC ObjC Var(warn_missing_parameter_type) Init(-1) WarningWarn about function parameters declared without a type specifier in K&R-style functions
Wmissing-prototypesC ObjC Var(warn_missing_prototypes) WarningWarn about global functions without prototypes
WmudflapCommon Var(warn_mudflap) Init(1) WarningWarn about constructs not instrumented by -fmudflap
WmulticharC ObjC C++ ObjC++ WarningWarn about use of multi-character character constants
Wnested-externsC ObjC Var(warn_nested_externs) WarningWarn about \"extern\" declarations not at file scope
Wnon-template-friendC++ ObjC++ Var(warn_nontemplate_friend) Init(1) WarningWarn when non-templatized friend functions are declared within a template
Wnon-virtual-dtorC++ ObjC++ Var(warn_nonvdtor) WarningWarn about non-virtual destructors
WnonnullC ObjC Var(warn_nonnull) WarningWarn about NULL being passed to argument slots marked as requiring non-NULL
Wnormalized=C ObjC C++ ObjC++ Joined Warning-Wnormalized=<id|nfc|nfkc>	Warn about non-normalised Unicode strings
Wold-style-castC++ ObjC++ Var(warn_old_style_cast) WarningWarn if a C-style cast is used in a program
Wold-style-declarationC ObjC Var(warn_old_style_declaration) Init(-1) WarningWarn for obsolescent usage in a declaration
Wold-style-definitionC ObjC Var(warn_old_style_definition) WarningWarn if an old-style parameter definition is used
WoverflowCommon Var(warn_overflow) Init(1) WarningWarn about overflow in arithmetic expressions
Woverlength-stringsC ObjC C++ ObjC++ Var(warn_overlength_strings) Init(-1) WarningWarn if a string is longer than the maximum portable length specified by the standard
Woverloaded-virtualC++ ObjC++ Var(warn_overloaded_virtual) WarningWarn about overloaded virtual function names
Woverride-initC ObjC Var(warn_override_init) Init(-1) WarningWarn about overriding initializers without side effects
WpackedCommon Var(warn_packed) WarningWarn when the packed attribute has no effect on struct layout
Wpacked-bitfield-compatC ObjC C++ ObjC++ Var(warn_packed_bitfield_compat) Init(-1) WarningWarn about packed bit-fields whose offset changed in GCC 4.4
WpaddedCommon Var(warn_padded) WarningWarn when padding is required to align structure members
WparenthesesC ObjC C++ ObjC++ Var(warn_parentheses) WarningWarn about possibly missing parentheses
Wpmf-conversionsC++ ObjC++ Var(warn_pmf2ptr) Init(1) WarningWarn when converting the type of pointers to member functions
Wpointer-arithC ObjC C++ ObjC++ Var(warn_pointer_arith) WarningWarn about function pointer arithmetic
Wpointer-signC ObjC Var(warn_pointer_sign) Init(-1) WarningWarn when a pointer differs in signedness in an assignment
Wpointer-to-int-castC ObjC Var(warn_pointer_to_int_cast) Init(1) WarningWarn when a pointer is cast to an integer of a different size
WpragmasC ObjC C++ ObjC++ Var(warn_pragmas) Init(1) WarningWarn about misuses of pragmas
WprotocolObjC ObjC++ Var(warn_protocol) Init(1) WarningWarn if inherited methods are unimplemented
WpsabiC ObjC C++ ObjC++ LTO Var(warn_psabi) Init(1) Undocumented
Wredundant-declsC ObjC C++ ObjC++ Var(warn_redundant_decls) WarningWarn about multiple declarations of the same object
WreorderC++ ObjC++ Var(warn_reorder) WarningWarn when the compiler reorders code
Wreturn-typeC ObjC C++ ObjC++ Var(warn_return_type) WarningWarn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++)
Wreturn-typeFortran Warning
WselectorObjC ObjC++ Var(warn_selector) WarningWarn if a selector has multiple methods
Wsequence-pointC ObjC C++ ObjC++ Var(warn_sequence_point) WarningWarn about possible violations of sequence point rules
WshadowCommon Var(warn_shadow) WarningWarn when one local variable shadows another
Wsign-compareC ObjC C++ ObjC++ Var(warn_sign_compare) Init(-1) WarningWarn about signed-unsigned comparisons
Wsign-compareDWarn about signed-unsigned comparisons
Wsign-conversionC ObjC C++ ObjC++ Var(warn_sign_conversion) Init(-1)Warn for implicit type conversions between signed and unsigned integers
Wsign-promoC++ ObjC++ Var(warn_sign_promo) WarningWarn when overload promotes from unsigned to signed
Wstack-protectorCommon Var(warn_stack_protect) WarningWarn when not issuing stack smashing protection for some reason
Wstrict-aliasingCommon WarningWarn about code which might break strict aliasing rules
Wstrict-aliasing=Common Joined UInteger Var(warn_strict_aliasing) Init(-1) WarningWarn about code which might break strict aliasing rules
Wstrict-null-sentinelC++ ObjC++ WarningWarn about uncasted NULL used as sentinel
Wstrict-overflowCommon WarningWarn about optimizations that assume that signed overflow is undefined
Wstrict-overflow=Common Joined UInteger Var(warn_strict_overflow) Init(-1) WarningWarn about optimizations that assume that signed overflow is undefined
Wstrict-prototypesC ObjC Var(warn_strict_prototypes) WarningWarn about unprototyped function declarations
Wstrict-selector-matchObjC ObjC++ Var(warn_strict_selector_match) WarningWarn if type signatures of candidate methods do not match exactly
WsurprisingFortran WarningWarn about \"suspicious\" constructs
WswitchCommon Var(warn_switch) WarningWarn about enumerated switches, with no default, missing a case
Wswitch-defaultCommon Var(warn_switch_default) WarningWarn about enumerated switches missing a \"default:\" statement
Wswitch-enumCommon Var(warn_switch_enum) WarningWarn about all enumerated switches missing a specific case
Wsync-nandC C++ Var(warn_sync_nand) Init(1) WarningWarn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used
WsynthC++ ObjC++ Var(warn_synth) WarningDeprecated.  This switch has no effect
Wsystem-headersC ObjC C++ ObjC++ Warning
Wsystem-headersCommon Var(warn_system_headers) WarningDo not suppress warnings from system headers
WtabsFortran WarningPermit nonconforming uses of the tab character
WtraditionalC ObjC Var(warn_traditional) WarningWarn about features not present in traditional C
Wtraditional-conversionC ObjC Var(warn_traditional_conversion) WarningWarn of prototypes causing type conversions different from what would happen in the absence of prototype
WtrigraphsC ObjC C++ ObjC++ WarningWarn if trigraphs are encountered that might affect the meaning of the program
Wtype-limitsCommon Var(warn_type_limits) Init(-1) WarningWarn if a comparison is always true or always false due to the limited range of the data type
Wundeclared-selectorObjC ObjC++ Var(warn_undeclared_selector) WarningWarn about @selector()s without previously declared methods
WundefC ObjC C++ ObjC++ WarningWarn if an undefined macro is used in an #if directive
WunderflowFortran WarningWarn about underflow of numerical constant expressions
WuninitializedCommon Var(warn_uninitialized) Init(-1) WarningWarn about uninitialized automatic variables
Wunknown-pragmasC ObjC C++ ObjC++ WarningWarn about unrecognized pragmas
Wunreachable-codeCommonDoes nothing. Preserved for backward compatibility.
Wunsafe-loop-optimizationsCommon Var(warn_unsafe_loop_optimizations) WarningWarn if the loop cannot be optimized due to nontrivial assumptions.
Wunsuffixed-float-constantsC ObjC Var(warn_unsuffixed_float_constants) WarningWarn about unsuffixed float constants
WunusedCommon Var(warn_unused) Init(0) WarningEnable all -Wunused- warnings
Wunused-functionCommon Var(warn_unused_function) Init(-1) WarningWarn when a function is unused
Wunused-labelCommon Var(warn_unused_label) Init(-1) WarningWarn when a label is unused
Wunused-macrosC ObjC C++ ObjC++ WarningWarn about macros defined in the main file that are not used
Wunused-parameterCommon Var(warn_unused_parameter) Init(-1) WarningWarn when a function parameter is unused
Wunused-resultC ObjC C++ ObjC++ Var(warn_unused_result) Init(1) WarningWarn if a caller of a function, marked with attribute warn_unused_result, does not use its return value
Wunused-valueCommon Var(warn_unused_value) Init(-1) WarningWarn when an expression value is unused
Wunused-variableCommon Var(warn_unused_variable) Init(-1) WarningWarn when a variable is unused
Wvariadic-macrosC ObjC C++ ObjC++ WarningDo not warn about using variadic macros when -pedantic
WvlaC ObjC C++ ObjC++ Var(warn_vla) Init(-1) WarningWarn if a variable length array is used
Wvolatile-register-varC ObjC C++ ObjC++ Var(warn_volatile_register_var) WarningWarn when a register variable is declared volatile
Wwrite-stringsC ObjC C++ ObjC++ Var(warn_write_strings) WarningIn C++, nonzero means warn about deprecated conversion from string literals to `char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.
ansiC ObjC C++ ObjC++A synonym for -std=c89 (for C) or -std=c++98 (for C++)
aux-infoCommon Separate-aux-info <file>	Emit declaration information into <file>
aux-info=Common Joined
auxbaseCommon Separate
auxbase-stripCommon Separate
cppFortran Joined Separate Negative(nocpp)Enable preprocessing
dC ObjC C++ ObjC++ Joined
dCommon Joined-d<letters>	Enable dumps from specific passes of the compiler
dFortran Joined
debuglib=Driver JoinedDebug library to use instead of phobos
defaultlib=Driver JoinedDefault library to use instead of phobos
dumpbaseCommon Separate-dumpbase <file>	Set the file basename to be used for dumps
dumpdirCommon Separate-dumpdir <dir>	Set the directory name to be used for dumps
fPICCommon Report Var(flag_pic,2)Generate position-independent code if possible (large mode)
fPIECommon Report Var(flag_pie,2)Generate position-independent code for executables if possible (large mode)
fXf=D Joined RejectNegative-fXf=<filename> Write JSON file to <filename>
fabi-version=Common Joined UInteger Var(flag_abi_version) Init(2)
faccess-controlC++ ObjC++Enforce class member access control semantics
falign-commonsFortranEnable alignment of COMMON blocks
falign-functionsCommon Report Var(align_functions,0) Optimization UIntegerAlign the start of functions
falign-functions=Common RejectNegative Joined UInteger
falign-jumpsCommon Report Var(align_jumps,0) Optimization UIntegerAlign labels which are only reached by jumping
falign-jumps=Common RejectNegative Joined UInteger
falign-labelsCommon Report Var(align_labels,0) Optimization UIntegerAlign all labels
falign-labels=Common RejectNegative Joined UInteger
falign-loopsCommon Report Var(align_loops) Optimization UIntegerAlign the start of loops
falign-loops=Common RejectNegative Joined UInteger
fall-intrinsicsFortran RejectNegativeAll intrinsics procedures are available regardless of selected standard
fall-virtualC++ ObjC++
fallow-leading-underscoreFortran Undocumented
falt-external-templatesC++ ObjC++Change when template instances are emitted
fargument-aliasCommon Report Var(flag_argument_noalias,0) OptimizationSpecify that arguments may alias each other and globals
fargument-noaliasCommon Report Var(flag_argument_noalias,1) VarExists OptimizationAssume arguments may alias globals but not each other
fargument-noalias-anythingCommon Report Var(flag_argument_noalias,3) VarExists OptimizationAssume arguments alias no other storage
fargument-noalias-globalCommon Report Var(flag_argument_noalias,2) VarExists OptimizationAssume arguments alias neither each other nor globals
fasmC ObjC C++ ObjC++Recognize the \"asm\" keyword
fasmDRecognize the \"asm\" keyword
fassertDGenerate runtime code for assert()'s
fassociative-mathCommon Report Var(flag_associative_math)Allow optimization for floating-point arithmetic which may change theresult of the operation due to rounding.
fasynchronous-unwind-tablesCommon Report Var(flag_asynchronous_unwind_tables) OptimizationGenerate unwind tables that are exact at each instruction boundary
fauto-inc-decCommon Report Var(flag_auto_inc_dec) Init(1)Generate auto-inc/dec instructions
fautomaticFortranDo not treat local variables and COMMON blocks as if they were named in SAVE statements
fbackslashFortranSpecify that backslash in string introduces an escape character
fbacktraceFortranProduce a backtrace when a runtime error is encountered
fblas-matmul-limit=Fortran RejectNegative Joined UInteger-fblas-matmul-limit=<n>	Size of the smallest matrix for which matmul will use BLAS
fbounds-checkCommon Report Var(flag_bounds_check)Generate code to check bounds before indexing arrays
fbounds-checkDGenerate code to check bounds before indexing arrays
fbranch-count-regCommon Report Var(flag_branch_on_count_reg) Init(1) OptimizationReplace add, compare, branch with branch on count register
fbranch-probabilitiesCommon Report Var(flag_branch_probabilities) OptimizationUse profiling information for branch probabilities
fbranch-target-load-optimizeCommon Report Var(flag_branch_target_load_optimize) OptimizationPerform branch target load optimization before prologue / epilogue threading
fbranch-target-load-optimize2Common Report Var(flag_branch_target_load_optimize2) OptimizationPerform branch target load optimization after prologue / epilogue threading
fbtr-bb-exclusiveCommon Report Var(flag_btr_bb_exclusive) OptimizationRestrict target load migration not to re-use registers in any basic block
fbuiltinC ObjC C++ ObjC++Recognize built-in functions
fbuiltinDRecognize built-in functions
fbuiltin-C ObjC C++ ObjC++ Joined
fcall-saved-Common Joined RejectNegative-fcall-saved-<register>	Mark <register> as being preserved across functions
fcall-used-Common Joined RejectNegative-fcall-used-<register>	Mark <register> as being corrupted by function calls
fcaller-savesCommon Report Var(flag_caller_saves) OptimizationSave registers around function calls
fcheck-array-temporariesFortranProduce a warning at runtime if a array temporary has been created for a procedure argument
fcheck-data-depsCommon Report Var(flag_check_data_deps)Compare the results of several data dependence analyzers.
fcheck-newC++ ObjC++Check the return value of new
fcheck=Fortran RejectNegative JoinedOrMissing-fcheck=[...]	Specify which runtime checks are to be performed
fcommonCommon Report Var(flag_no_common,0) OptimizationDo not put uninitialized globals in the common section
fcompare-debug-secondCommon RejectNegative Var(flag_compare_debug)Run only the second compilation of -fcompare-debug
fcompare-debug=Common JoinedOrMissing RejectNegative Var(flag_compare_debug_opt)-fcompare-debug[=<opts>]	Compile with and without e.g. -gtoggle, and compare the final-insns dump
fcond-mismatchC ObjC C++ ObjC++Allow the arguments of the '?' operator to have different types
fconserve-spaceC++ ObjC++Reduce the size of object files
fconserve-stackCommon Var(flag_conserve_stack) OptimizationDo not perform optimizations increasing noticeably stack usage
fconstant-string-class=ObjC ObjC++ Joined-fconst-string-class=<name>	Use class <name> for constant strings
fconvert=big-endianFortran RejectNegativeUse big-endian format for unformatted files
fconvert=little-endianFortran RejectNegativeUse little-endian format for unformatted files
fconvert=nativeFortran RejectNegativeUse native format for unformatted files
fconvert=swapFortran RejectNegativeSwap endianness for unformatted files
fcprop-registersCommon Report Var(flag_cprop_registers) OptimizationPerform a register copy-propagation optimization pass
fcray-pointerFortranUse the Cray Pointer extension
fcrossjumpingCommon Report Var(flag_crossjumping) OptimizationPerform cross-jumping optimization
fcse-follow-jumpsCommon Report Var(flag_cse_follow_jumps) OptimizationWhen running CSE, follow jumps to their targets
fcse-skip-blocksCommonDoes nothing.  Preserved for backward compatibility.
fcx-fortran-rulesCommon Report Var(flag_cx_fortran_rules) OptimizationComplex multiplication and division follow Fortran rules
fcx-limited-rangeCommon Report Var(flag_cx_limited_range) OptimizationOmit range reduction step when performing complex division
fd-lines-as-codeFortran RejectNegativeIgnore 'D' in column one in fixed form
fd-lines-as-commentsFortran RejectNegativeTreat lines with 'D' in column one as comments
fd-verboseDPrint information about D language processing to stdout
fd-version=1D RejectNegativeCompile as D language version 1
fd-vtlsDList all variables going into thread local storage
fdata-sectionsCommon Report Var(flag_data_sections) OptimizationPlace data items into their own section
fdbg-cnt-listCommon ReportList all available debugging counters with their limits and counts.
fdbg-cnt=Common RejectNegative Joined-fdbg-cnt=<counter>:<limit>[,<counter>:<limit>,...]	Set the debug counter limit.   
fdceCommon Var(flag_dce) Init(1) OptimizationUse the RTL dead code elimination pass
fdebugDCompile in debug code
fdebug-cDWith -g, generate C debug information for debugger compatibility
fdebug-prefix-map=Common Joined RejectNegativeMap one directory name to another in debug information
fdebug=D Joined RejectNegative-fdebug,-fdebug=<level>,-fdebug=<ident> Compile in debug code, code <= level, or code identified by ident
fdeduce-init-listC++ ObjC++ Var(flag_deduce_init_list) Init(1)-fno-deduce-init-list	disable deduction of std::initializer_list for a template type parameter from a brace-enclosed initializer-list
fdefault-double-8FortranSet the default double precision kind to an 8 byte wide type
fdefault-inlineC++ ObjC++Inline member functions by default
fdefault-integer-8FortranSet the default integer kind to an 8 byte wide type
fdefault-real-8FortranSet the default real kind to an 8 byte wide type
fdefer-popCommon Report Var(flag_defer_pop) OptimizationDefer popping functions args from stack until later
fdelayed-branchCommon Report Var(flag_delayed_branch) OptimizationAttempt to fill delay slots of branch instructions
fdelete-null-pointer-checksCommon Report Var(flag_delete_null_pointer_checks) Init(1) OptimizationDelete useless null pointer checks
fdeprecatedDAllow use of deprecated features
fdeps=D Joined RejectNegative-fdeps=<filename> Write module dependencies to filename
fdiagnostics-show-location=Common Joined RejectNegative-fdiagnostics-show-location=[once|every-line]	How often to emit source location at the beginning of line-wrapped diagnostics
fdiagnostics-show-optionCommonAmend appropriate diagnostic messages with the command line option that controls them
fdirectives-onlyC ObjC C++ ObjC++Preprocess directives only.
fdocDGenerate documentation
fdoc-dir=D Joined RejectNegative-fdoc-dir=<docdir> Write documentation file to docdir directory
fdoc-file=D Joined RejectNegative-fdoc-file=<filename> Write documentation file to filename
fdoc-inc=D Joined RejectNegative-fdoc-inc=<filename> Include a Ddoc macro file
fdollar-okFortranAllow dollar signs in entity names
fdollars-in-identifiersC ObjC C++ ObjC++Permit '$' as an identifier character
fdseCommon Var(flag_dse) Init(1) OptimizationUse the RTL dead store elimination pass
fdump-Common Joined RejectNegative-fdump-<type>	Dump various compiler internals to a file
fdump-coreFortranDump a core file when a runtime error occurs
fdump-final-insns=Common RejectNegative Joined Var(flag_dump_final_insns)-fdump-final-insns=filename	Dump to filename the insns at the end of translation
fdump-noaddrCommon Report Var(flag_dump_noaddr)Suppress output of addresses in debugging dumps
fdump-parse-treeFortranDisplay the code tree after parsing
fdump-sourceD RejectNegativeDump decoded UTF-8 text and source from HTML
fdump-unnumberedCommon Report Var(flag_dump_unnumbered) VarExistsSuppress output of instruction numbers, line number notes and addresses in debugging dumps
fdump-unnumbered-linksCommon Report Var(flag_dump_unnumbered_links) VarExistsSuppress output of previous and next insn numbers in debugging dumps
fdwarf2-cfi-asmCommon Report Var(flag_dwarf2_cfi_asm) Init(HAVE_GAS_CFI_DIRECTIVE)Enable CFI tables via GAS assembler directives.
fearly-inliningCommon Report Var(flag_early_inlining) Init(1) OptimizationPerform early inlining
felide-constructorsC++ ObjC++
feliminate-dwarf2-dupsCommon Report Var(flag_eliminate_dwarf2_dups)Perform DWARF2 duplicate elimination
feliminate-unused-debug-symbolsCommon Report Var(flag_debug_only_used_symbols)Perform unused type elimination in debug info
feliminate-unused-debug-typesCommon Report Var(flag_eliminate_unused_debug_types) Init(1)Perform unused type elimination in debug info
femit-class-debug-alwaysCommon Report Var(flag_emit_class_debug_always) Init(0)Do not suppress C++ class debug information.
femit-struct-debug-baseonlyC ObjC C++ ObjC++-femit-struct-debug-baseonly	Aggressive reduced debug info for structs
femit-struct-debug-detailed=C ObjC C++ ObjC++ Joined-femit-struct-debug-detailed=<spec-list>	Detailed reduced debug info for structs
femit-struct-debug-reducedC ObjC C++ ObjC++-femit-struct-debug-reduced	Conservative reduced debug info for structs
femit-templatesD-femit-templates Emit templates code and data even if the linker cannot merge multiple copies
femit-templates=D Joined RejectNegative-femit-templates=[normal|private|all|none|auto]	Control template emission
fenable-icf-debugCommon Report Var(flag_enable_icf_debug)Generate debug information to support Identical Code Folding (ICF)
fenforce-eh-specsC++ ObjC++Generate code to check exception specifications
fenum-int-equivC++ ObjC++
fexceptionsCommon Report Var(flag_exceptions) OptimizationEnable exception handling
fexcess-precision=Common Joined RejectNegative-fexcess-precision=[fast|standard]	Specify handling of excess floating-point precision
fexec-charset=C ObjC C++ ObjC++ Joined RejectNegative-fexec-charset=<cset>	Convert all strings and character constants to character set <cset>
fexpensive-optimizationsCommon Report Var(flag_expensive_optimizations) OptimizationPerform a number of minor, expensive optimizations
fextended-identifiersC ObjC C++ ObjC++Permit universal character names (\\u and \\U) in identifiers
fexternal-blasFortranSpecify that an external BLAS library should be used for matmul calls on large-size arrays
fexternal-templatesC++ ObjC++
ff2cFortranUse f2c calling convention
ffast-mathCommon
ffinite-math-onlyCommon Report Var(flag_finite_math_only) OptimizationAssume no NaNs or infinities are generated
ffixed-Common Joined RejectNegative-ffixed-<register>	Mark <register> as being unavailable to the compiler
ffixed-formFortran RejectNegativeAssume that the source file is fixed form
ffixed-line-length-Fortran RejectNegative Joined UInteger-ffixed-line-length-<n>	Use n as character line width in fixed mode
ffixed-line-length-noneFortran RejectNegativeAllow arbitrary character line width in fixed mode
ffloat-storeCommon Report Var(flag_float_store) OptimizationDon't allocate floats and doubles in extended-precision registers
ffor-scopeC++ ObjC++Scope of for-init-statement variables is local to the loop
fforce-addrCommonDoes nothing.  Preserved for backward compatibility.
fforward-propagateCommon Report Var(flag_forward_propagate) OptimizationPerform a forward propagation pass on RTL
ffpe-trap=Fortran RejectNegative JoinedOrMissing-ffpe-trap=[...]	Stop on following floating point exceptions
ffree-formFortran RejectNegativeAssume that the source file is free form
ffree-line-length-Fortran RejectNegative Joined UInteger-ffree-line-length-<n>	Use n as character line width in free mode
ffree-line-length-noneFortran RejectNegativeAllow arbitrary character line width in free mode
ffreestandingC ObjC C++ ObjC++Do not assume that standard C libraries and \"main\" exist
ffriend-injectionC++ ObjC++ Var(flag_friend_injection)Inject friend functions into enclosing namespace
ffunction-cseCommon Report Var(flag_no_function_cse,0)Allow function addresses to be held in registers
ffunction-sectionsCommon Report Var(flag_function_sections)Place each function into its own section
fgcseCommon Report Var(flag_gcse) OptimizationPerform global common subexpression elimination
fgcse-after-reloadCommon Report Var(flag_gcse_after_reload) OptimizationPerform global common subexpression elimination after register allocationhas finished
fgcse-lasCommon Report Var(flag_gcse_las) Init(0) OptimizationPerform redundant load after store elimination in global common subexpressionelimination
fgcse-lmCommon Report Var(flag_gcse_lm) Init(1) OptimizationPerform enhanced load motion during global common subexpression elimination
fgcse-smCommon Report Var(flag_gcse_sm) Init(0) OptimizationPerform store motion after global common subexpression elimination
fgnu-keywordsC++ ObjC++Recognize GNU-defined keywords
fgnu-runtimeObjC ObjC++Generate code for GNU runtime environment
fgnu89-inlineC ObjC Var(flag_gnu89_inline) Init(-1)Use traditional GNU semantics for inline functions
fgraphiteCommon Report Var(flag_graphite)Enable in and out of Graphite representation
fgraphite-identityCommon Report Var(flag_graphite_identity) OptimizationEnable Graphite Identity transformation
fguess-branch-probabilityCommon Report Var(flag_guess_branch_prob) OptimizationEnable guessing of branch probabilities
fguiding-declsC++ ObjC++
fhandle-exceptionsC++ ObjC++ Optimization
fhelpCommon Var(help_flag)
fhelp=Common Joined
fhonor-stdC++ ObjC++
fhostedC ObjCAssume normal C execution environment
fhuge-objectsC++ ObjC++Enable support for huge objects
fidentCommon Report Var(flag_no_ident,0)Process #ident directives
fif-conversionCommon Report Var(flag_if_conversion) OptimizationPerform conversion of conditional jumps to branchless equivalents
fif-conversion2Common Report Var(flag_if_conversion2) OptimizationPerform conversion of conditional jumps to conditional execution
fignore-unknown-pragmasDIgnore unsupported pragmas
fimplement-inlinesC++ ObjC++Export functions even if they can be inlined
fimplicit-inline-templatesC++ ObjC++Emit implicit instantiations of inline templates
fimplicit-noneFortranSpecify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements
fimplicit-templatesC++ ObjC++Emit implicit instantiations of templates
findirect-inliningCommon Report Var(flag_indirect_inlining)Perform indirect inlining
finhibit-size-directiveCommon Report Var(flag_inhibit_size_directive)Do not generate .size directives
finit-character=Fortran RejectNegative Joined UInteger-finit-character=<n>	Initialize local character variables to ASCII value n
finit-integer=Fortran RejectNegative Joined-finit-integer=<n>	Initialize local integer variables to n
finit-local-zeroFortranInitialize local variables to zero (from g77)
finit-logical=Fortran RejectNegative Joined-finit-logical=<true|false>	Initialize local logical variables
finit-real=Fortran RejectNegative Joined-finit-real=<zero|nan|inf|-inf>	Initialize local real variables
finlineCommon Report Var(flag_no_inline,0) Init(0)Pay attention to the \"inline\" keyword
finline-functionsCommon Report Var(flag_inline_functions) OptimizationIntegrate simple functions into their callers
finline-functions-called-onceCommon Report Var(flag_inline_functions_called_once) Init(1) OptimizationIntegrate functions called once into their callers
finline-limit-Common RejectNegative Joined UInteger
finline-limit=Common RejectNegative Joined UInteger-finline-limit=<number>	Limit the size of inlined functions to <number>
finline-small-functionsCommon Report Var(flag_inline_small_functions) OptimizationIntegrate simple functions into their callers when code size is known to not growth
finput-charset=C ObjC C++ ObjC++ Joined RejectNegative-finput-charset=<cset>	Specify the default character set for source files
finstrument-functionsCommon Report Var(flag_instrument_function_entry_exit)Instrument function entry and exit with profiling calls
finstrument-functions-exclude-file-list=Common RejectNegative Joined-finstrument-functions-exclude-file-list=filename,...  Do not instrument functions listed in files
finstrument-functions-exclude-function-list=Common RejectNegative Joined-finstrument-functions-exclude-function-list=name,...  Do not instrument listed functions
fintfcGenerate D interface files
fintfc-dir=D Joined RejectNegative-fintfc-dir=<dir> Write D interface files to directory <dir>
fintfc-file=D Joined RejectNegative-fintfc-file=<filename> Write D interface file to <filename>
fintrinsic-modules-pathFortran RejectNegative Joined SeparateSpecify where to find the compiled intrinsic modules
fipa-cpCommon Report Var(flag_ipa_cp) OptimizationPerform Interprocedural constant propagation
fipa-cp-cloneCommon Report Var(flag_ipa_cp_clone) OptimizationPerform cloning to make Interprocedural constant propagation stronger
fipa-matrix-reorgCommon Report Var(flag_ipa_matrix_reorg) OptimizationPerform matrix layout flattening and transposing basedon profiling information.
fipa-ptaCommon Report Var(flag_ipa_pta) Init(0) OptimizationPerform interprocedural points-to analysis
fipa-pure-constCommon Report Var(flag_ipa_pure_const) Init(0) OptimizationDiscover pure and const functions
fipa-referenceCommon Report Var(flag_ipa_reference) Init(0) OptimizationDiscover readonly and non addressable static variables
fipa-sraCommon Report Var(flag_ipa_sra) Init(0) OptimizationPerform interprocedural reduction of aggregates
fipa-struct-reorgCommon Report Var(flag_ipa_struct_reorg)Perform structure layout optimizations basedon profiling information.
fipa-type-escapeCommon Report Var(flag_ipa_type_escape) Init(0) OptimizationType based escape and alias analysis
fira-algorithm=Common Joined RejectNegative-fira-algorithm=[CB|priority] Set the used IRA algorithm
fira-coalesceCommon Report Var(flag_ira_coalesce) Init(0)Do optimistic coalescing.
fira-loop-pressureCommon Report Var(flag_ira_loop_pressure)Use IRA based register pressure calculationin RTL loop optimizations.
fira-region=Common Joined RejectNegative-fira-region=[one|all|mixed] Set regions for IRA
fira-share-save-slotsCommon Report Var(flag_ira_share_save_slots) Init(1)Share slots for saving different hard registers.
fira-share-spill-slotsCommon Report Var(flag_ira_share_spill_slots) Init(1)Share stack slots for spilled pseudo-registers.
fira-verbose=Common RejectNegative Joined UInteger-fira-verbose=<number>	Control IRA's level of diagnostic messages.
fivoptsCommon Report Var(flag_ivopts) Init(1) OptimizationOptimize induction variables on trees
fjump-tablesCommon Var(flag_jump_tables) Init(1) OptimizationUse jump tables for sufficiently large switch statements
fkeep-inline-functionsCommon Report Var(flag_keep_inline_functions)Generate code for functions even if they are fully inlined
fkeep-static-constsCommon Report Var(flag_keep_static_consts) Init(1)Emit static const variables even if they are not used
flabels-okC++ ObjC++
flax-vector-conversionsC ObjC C++ ObjC++Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.
fleading-underscoreCommon Report Var(flag_leading_underscore) Init(-1)Give external symbols a leading underscore
floop-blockCommon Report Var(flag_loop_block) OptimizationEnable Loop Blocking transformation
floop-interchangeCommon Report Var(flag_loop_interchange) OptimizationEnable Loop Interchange transformation
floop-optimizeCommonDoes nothing.  Preserved for backward compatibility.
floop-parallelize-allCommon Report Var(flag_loop_parallelize_all) OptimizationMark all loops as parallel
floop-strip-mineCommon Report Var(flag_loop_strip_mine) OptimizationEnable Loop Strip Mining transformation
fltoCommon Var(flag_lto)Enable link-time optimization.
flto-compression-level=Common Joined UInteger Var(flag_lto_compression_level) Init(-1)-flto-compression-level=<number>	Use zlib compression level <number> for IL
flto-reportCommon Report Var(flag_lto_report) Init(0) OptimizationReport various link-time optimization statistics
fltransLTO Report Var(flag_ltrans) OptimizationRun the link-time optimizer in local transformation (LTRANS) mode.
fltrans-output-list=LTO Joined Var(ltrans_output_list)Specify a file to which a list of files output by LTRANS is written.
fmath-errnoCommon Report Var(flag_errno_math) Init(1) OptimizationSet errno after built-in math functions
fmax-array-constructor=Fortran RejectNegative Joined UInteger-fmax-array-constructor=<n>	Maximum number of objects in an array constructor
fmax-errors=Fortran RejectNegative Joined UInteger-fmax-errors=<n>	Maximum number of errors to report
fmax-identifier-length=Fortran RejectNegative Joined UInteger-fmax-identifier-length=<n>	Maximum identifier length
fmax-stack-var-size=Fortran RejectNegative Joined UInteger-fmax-stack-var-size=<n>	Size in bytes of the largest array that will be put on the stack
fmax-subrecord-length=Fortran RejectNegative Joined UInteger-fmax-subrecord-length=<n>	Maximum length for subrecords
fmem-reportCommon Report Var(mem_report)Report on permanent memory allocation
fmerge-all-constantsCommon Report Var(flag_merge_constants,2) Init(1) OptimizationAttempt to merge identical constants and constant variables
fmerge-constantsCommon Report Var(flag_merge_constants,1) VarExists OptimizationAttempt to merge identical constants across compilation units
fmerge-debug-stringsCommon Report Var(flag_merge_debug_strings) Init(1)Attempt to merge identical debug strings across compilation units
fmessage-length=Common RejectNegative Joined UInteger-fmessage-length=<number>	Limit diagnostics to <number> characters per line.  0 suppresses line-wrapping
fmodule-privateFortranSet default accessibility of module entities to PRIVATE.
fmodulo-schedCommon Report Var(flag_modulo_sched) OptimizationPerform SMS based modulo scheduling before the first scheduling pass
fmodulo-sched-allow-regmovesCommon Report Var(flag_modulo_sched_allow_regmoves)Perform SMS based modulo scheduling with register moves allowed
fmove-loop-invariantsCommon Report Var(flag_move_loop_invariants) Init(1) OptimizationMove loop invariant computations out of loops
fms-extensionsC ObjC C++ ObjC++Don't warn about uses of Microsoft extensions
fmudflapCommon RejectNegative Report Var(flag_mudflap)Add mudflap bounds-checking instrumentation for single-threaded program
fmudflapirCommon RejectNegative Report Var(flag_mudflap_ignore_reads)Ignore read operations when inserting mudflap instrumentation
fmudflapthCommon RejectNegative Report VarExists Var(flag_mudflap,2)Add mudflap bounds-checking instrumentation for multi-threaded program
fname-mangling-version-C++ ObjC++ Joined
fnew-abiC++ ObjC++
fnext-runtimeObjC ObjC++Generate code for NeXT (Apple Mac OS X) runtime environment
fnil-receiversObjC ObjC++Assume that receivers of Objective-C messages may be nil
fnon-call-exceptionsCommon Report Var(flag_non_call_exceptions) OptimizationSupport synchronous non-call exceptions
fnonansi-builtinsC++ ObjC++
fnonnull-objectsC++ ObjC++
fobjc-call-cxx-cdtorsObjC++ Var(flag_objc_call_cxx_cdtors)Generate special Objective-C methods to initialize/destroy non-POD C++ ivars, if needed
fobjc-direct-dispatchObjC ObjC++ Var(flag_objc_direct_dispatch)Allow fast jumps to the message dispatcher
fobjc-exceptionsObjC ObjC++ Var(flag_objc_exceptions)Enable Objective-C exception and synchronization syntax
fobjc-gcObjC ObjC++ Var(flag_objc_gc)Enable garbage collection (GC) in Objective-C/Objective-C++ programs
fobjc-sjlj-exceptionsObjC ObjC++ Var(flag_objc_sjlj_exceptions) Init(-1)Enable Objective-C setjmp exception handling runtime
fod=Driver Joined-fod=<directory> Specify the object output directory.
fomit-frame-pointerCommon Report Var(flag_omit_frame_pointer) OptimizationWhen possible do not generate stack frames
fonly=D Joined RejectNegativeProcess all modules specified on the command line, but only generate code for the module specified by the argument.
fopDriverSpecify that the source file's parent directories should be appended to the object output directory.
fopenmpC ObjC C++ ObjC++ Var(flag_openmp)Enable OpenMP (implies -frecursive in Fortran)
fopenmpFortran
foperator-namesC++ ObjC++Recognize C++ keywords like \"compl\" and \"xor\"
foptimize-register-moveCommon Report Var(flag_regmove) OptimizationDo the full register move optimization pass
foptimize-sibling-callsCommon Report Var(flag_optimize_sibling_calls) OptimizationOptimize sibling and tail recursive calls
foptional-diagsC++ ObjC++Enable optional diagnostics
fpack-derivedFortranTry to lay out derived types as compactly as possible
fpack-structCommon Report Var(flag_pack_struct) OptimizationPack structure members together without holes
fpack-struct=Common RejectNegative Joined UInteger Optimization-fpack-struct=<number>	Set initial maximum structure member alignment
fpcc-struct-returnCommon Report Var(flag_pcc_struct_return,1) VarExistsReturn small aggregates in memory, not registers
fpch-depsC ObjC C++ ObjC++
fpch-preprocessC ObjC C++ ObjC++Look for and use PCH files even when preprocessing
fpeel-loopsCommon Report Var(flag_peel_loops) OptimizationPerform loop peeling
fpeepholeCommon Report Var(flag_no_peephole,0) OptimizationEnable machine specific peephole optimizations
fpeephole2Common Report Var(flag_peephole2) OptimizationEnable an RTL peephole pass before sched2
fpermissiveC++ ObjC++Downgrade conformance errors to warnings
fpicCommon Report Var(flag_pic,1) VarExistsGenerate position-independent code if possible (small mode)
fpieCommon Report Var(flag_pie,1) VarExistsGenerate position-independent code for executables if possible (small mode)
fplugin-arg-Common Joined RejectNegative-fplugin-arg-<name>-<key>[=<value>]	Specify argument <key>=<value> for plugin <name>
fplugin=Common Joined RejectNegativeSpecify a plugin to load
fpost-ipa-mem-reportCommon Report Var(post_ipa_mem_report)Report on memory allocation before interprocedural optimization
fpre-ipa-mem-reportCommon Report Var(pre_ipa_mem_report)Report on memory allocation before interprocedural optimization
fpredictive-commoningCommon Report Var(flag_predictive_commoning) OptimizationRun predictive commoning optimization.
fprefetch-loop-arraysCommon Report Var(flag_prefetch_loop_arrays) OptimizationGenerate prefetch instructions, if available, for arrays in loops
fpreprocessedC ObjC C++ ObjC++Treat the input file as already preprocessed
fpreprocessedFortran
fpretty-templatesC++ ObjC++-fno-pretty-templates Do not pretty-print template specializations as the template signature followed by the arguments
fprofileCommon Report Var(profile_flag)Enable basic program profiling code
fprofile-arcsCommon Report Var(profile_arc_flag)Insert arc-based program profiling code
fprofile-correctionCommon Report Var(flag_profile_correction)Enable correction of flow inconsistent profile data input
fprofile-dir=Common Joined RejectNegativeSet the top-level directory for storing the profile data.The default is 'pwd'.
fprofile-generateCommonEnable common options for generating profile info for profile feedback directed optimizations
fprofile-generate=Common Joined RejectNegativeEnable common options for generating profile info for profile feedback directed optimizations, and set -fprofile-dir=
fprofile-useCommon Var(flag_profile_use)Enable common options for performing profile feedback directed optimizations
fprofile-use=Common Joined RejectNegativeEnable common options for performing profile feedback directed optimizations, and set -fprofile-dir=
fprofile-valuesCommon Report Var(flag_profile_values)Insert code to profile values of expressions
fpropertyDEnforce property syntax
fprotect-parensFortranProtect parentheses in expressions
frandom-seedCommon
frandom-seed=Common Joined RejectNegative-frandom-seed=<string>	Make compile reproducible using <string>
frange-checkFortranEnable range checking during compilation
freciprocal-mathCommon Report Var(flag_reciprocal_math)Same as -fassociative-math for expressions which include division.
frecord-gcc-switchesCommon Report Var(flag_record_gcc_switches)Record gcc command line switches in the object file.
frecord-marker=4Fortran RejectNegativeUse a 4-byte record marker for unformatted files
frecord-marker=8Fortran RejectNegativeUse an 8-byte record marker for unformatted files
frecursiveFortranAllocate local variables on the stack to allow indirect recursion
freg-struct-returnCommon Report Var(flag_pcc_struct_return,0) VarExists OptimizationReturn small aggregates in registers
fregmoveCommon Report Var(flag_regmove) OptimizationEnables a register move optimization
freleaseDCompile release version
frename-registersCommon Report Var(flag_rename_registers) Init(2) OptimizationPerform a register renaming optimization pass
freorder-blocksCommon Report Var(flag_reorder_blocks) OptimizationReorder basic blocks to improve code placement
freorder-blocks-and-partitionCommon Report Var(flag_reorder_blocks_and_partition) OptimizationReorder basic blocks and partition into hot and cold sections
freorder-functionsCommon Report Var(flag_reorder_functions) OptimizationReorder functions to improve code placement
frepack-arraysFortranCopy array sections into a contiguous block on procedure entry
freplace-objc-classesObjC ObjC++Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime
frepoC++ ObjC++Enable automatic template instantiation
frerun-cse-after-loopCommon Report Var(flag_rerun_cse_after_loop) Init(2) OptimizationAdd a common subexpression elimination pass after loop optimizations
frerun-loop-optCommonDoes nothing.  Preserved for backward compatibility.
freschedule-modulo-scheduled-loopsCommon Report Var(flag_resched_modulo_sched) OptimizationEnable/Disable the traditional scheduling in loops that already passed modulo scheduling
fresolutionLTO SeparateThe resolution file
frounding-mathCommon Report Var(flag_rounding_math) OptimizationDisable optimizations that assume default FP rounding behavior
frttiC++ ObjC++ OptimizationGenerate run time type descriptor information
fsched-critical-path-heuristicCommon Report Var(flag_sched_critical_path_heuristic) Init(1) OptimizationEnable the critical path heuristic in the scheduler
fsched-dep-count-heuristicCommon Report Var(flag_sched_dep_count_heuristic) Init(1) OptimizationEnable the dependent count heuristic in the scheduler
fsched-group-heuristicCommon Report Var(flag_sched_group_heuristic) Init(1) OptimizationEnable the group heuristic in the scheduler
fsched-interblockCommon Report Var(flag_schedule_interblock) Init(1) OptimizationEnable scheduling across basic blocks
fsched-last-insn-heuristicCommon Report Var(flag_sched_last_insn_heuristic) Init(1) OptimizationEnable the last instruction heuristic in the scheduler
fsched-pressureCommon Report Var(flag_sched_pressure) Init(0) OptimizationEnable register pressure sensitive insn scheduling
fsched-rank-heuristicCommon Report Var(flag_sched_rank_heuristic) Init(1) OptimizationEnable the rank heuristic in the scheduler
fsched-specCommon Report Var(flag_schedule_speculative) Init(1) OptimizationAllow speculative motion of non-loads
fsched-spec-insn-heuristicCommon Report Var(flag_sched_spec_insn_heuristic) Init(1) OptimizationEnable the speculative instruction heuristic in the scheduler
fsched-spec-loadCommon Report Var(flag_schedule_speculative_load) OptimizationAllow speculative motion of some loads
fsched-spec-load-dangerousCommon Report Var(flag_schedule_speculative_load_dangerous) OptimizationAllow speculative motion of more loads
fsched-stalled-insnsCommon Report Var(flag_sched_stalled_insns) Optimization UIntegerAllow premature scheduling of queued insns
fsched-stalled-insns-depCommon Report Var(flag_sched_stalled_insns_dep,1) Init(1) Optimization UIntegerSet dependence distance checking in premature scheduling of queued insns
fsched-stalled-insns-dep=Common RejectNegative Joined UInteger-fsched-stalled-insns-dep=<number>	Set dependence distance checking in premature scheduling of queued insns
fsched-stalled-insns=Common RejectNegative Joined UInteger-fsched-stalled-insns=<number>	Set number of queued insns that can be prematurely scheduled
fsched-verbose=Common RejectNegative Joined-fsched-verbose=<number>	Set the verbosity level of the scheduler
fsched2-use-superblocksCommon Report Var(flag_sched2_use_superblocks) OptimizationIf scheduling post reload, do superblock scheduling
fsched2-use-tracesCommonDoes nothing.  Preserved for backward compatibility.
fschedule-insnsCommon Report Var(flag_schedule_insns) OptimizationReschedule instructions before register allocation
fschedule-insns2Common Report Var(flag_schedule_insns_after_reload) OptimizationReschedule instructions after register allocation
fsecond-underscoreFortranAppend a second underscore if the name already contains an underscore
fsection-anchorsCommon Report Var(flag_section_anchors) OptimizationAccess data in the same section from shared anchor points
fseeCommonDoes nothing.  Preserved for backward compatibility.
fsel-sched-pipeliningCommon Report Var(flag_sel_sched_pipelining) Init(0) OptimizationPerform software pipelining of inner loops during selective scheduling
fsel-sched-pipelining-outer-loopsCommon Report Var(flag_sel_sched_pipelining_outer_loops) Init(0) OptimizationPerform software pipelining of outer loops during selective scheduling
fsel-sched-reschedule-pipelinedCommon Report Var(flag_sel_sched_reschedule_pipelined) Init(0) OptimizationReschedule pipelined regions without pipelining
fselective-schedulingCommon Report Var(flag_selective_scheduling) OptimizationSchedule instructions using selective scheduling algorithm
fselective-scheduling2Common Report Var(flag_selective_scheduling2) Optimization Run selective scheduling after reload
fshort-doubleC ObjC C++ ObjC++ OptimizationUse the same size for double as for float
fshort-enumsC ObjC C++ ObjC++ OptimizationUse the narrowest integer type possible for enumeration types
fshort-enumsFortran
fshort-wcharC ObjC C++ ObjC++ OptimizationForce the underlying type for \"wchar_t\" to be \"unsigned short\"
fshow-columnCommon C ObjC C++ ObjC++ Report Var(flag_show_column) Init(1)Show column numbers in diagnostics, when available.  Default on
fsign-zeroFortranApply negative sign to zero values
fsignaling-nansCommon Report Var(flag_signaling_nans) OptimizationDisable optimizations observable by IEEE signaling NaNs
fsigned-bitfieldsC ObjC C++ ObjC++When \"signed\" or \"unsigned\" is not given make the bitfield signed
fsigned-charC ObjC C++ ObjC++ LTOMake \"char\" signed by default
fsigned-zerosCommon Report Var(flag_signed_zeros) Init(1) OptimizationDisable floating point optimizations that ignore the IEEE signedness of zero
fsingle-precision-constantCommon Report Var(flag_single_precision_constant) OptimizationConvert floating point constants to single precision constants
fsplit-ivs-in-unrollerCommon Report Var(flag_split_ivs_in_unroller) Init(1) OptimizationSplit lifetimes of induction variables when loops are unrolled
fsplit-wide-typesCommon Report Var(flag_split_wide_types) OptimizationSplit wide types into independent registers
fsquangleC++ ObjC++
fstack-checkCommon ReportInsert stack checking code into the program.  Same as -fstack-check=specific
fstack-check=Common Report RejectNegative Joined-fstack-check=[no|generic|specific]	Insert stack checking code into the program
fstack-limitCommon
fstack-limit-register=Common RejectNegative Joined-fstack-limit-register=<register>	Trap if the stack goes past <register>
fstack-limit-symbol=Common RejectNegative Joined-fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>
fstack-protectorCommon Report Var(flag_stack_protect, 1)Use propolice as a stack protection method
fstack-protector-allCommon Report RejectNegative Var(flag_stack_protect, 2) VarExistsUse a stack protection method for every function
fstatsC++ ObjC++Display statistics accumulated during compilation
fstrength-reduceCommonDoes nothing.  Preserved for backward compatibility.
fstrict-aliasingCommon Report Var(flag_strict_aliasing) OptimizationAssume strict aliasing rules apply
fstrict-overflowCommon Report Var(flag_strict_overflow)Treat signed overflow as undefined
fstrict-prototypeC++ ObjC++
fsyntax-onlyCommon Report Var(flag_syntax_only)Check for syntax errors, then stop
ftabstop=C ObjC C++ ObjC++ Joined RejectNegative UInteger-ftabstop=<number>	Distance between tab stops for column reporting
ftarget-helpCommon
ftemplate-depth-C++ ObjC++ Joined RejectNegative UInteger Undocumented
ftemplate-depth=C++ ObjC++ Joined RejectNegative UInteger-ftemplate-depth=<number>	Specify maximum template instantiation depth
ftest-coverageCommon Report Var(flag_test_coverage)Create data files needed by \"gcov\"
fthis-is-variableC++ ObjC++
fthread-jumpsCommon Report Var(flag_thread_jumps) OptimizationPerform jump threading optimizations
fthreadsafe-staticsC++ ObjC++ Optimization-fno-threadsafe-statics	Do not generate thread-safe code for initializing local statics
ftime-reportCommon Report Var(time_report)Report the time taken by each compiler pass
ftls-model=Common Joined RejectNegative-ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]	Set the default thread-local storage code generation model
ftoplevel-reorderCommon Report Var(flag_toplevel_reorder) Init(2) OptimizationReorder top level functions, variables, and asms
ftracerCommon Report Var(flag_tracer)Perform superblock formation via tail duplication
ftrapping-mathCommon Report Var(flag_trapping_math) Init(1) OptimizationAssume floating-point operations can trap
ftrapvCommon Report Var(flag_trapv) OptimizationTrap for signed overflow in addition, subtraction and multiplication
ftree-builtin-call-dceCommon Report Var(flag_tree_builtin_call_dce) Init(0) OptimizationEnable conditional dead code elimination for builtin calls
ftree-ccpCommon Report Var(flag_tree_ccp) OptimizationEnable SSA-CCP optimization on trees
ftree-chCommon Report Var(flag_tree_ch) OptimizationEnable loop header copying on trees
ftree-copy-propCommon Report Var(flag_tree_copy_prop) OptimizationEnable copy propagation on trees
ftree-copyrenameCommon Report Var(flag_tree_copyrename) OptimizationReplace SSA temporaries with better names in copies
ftree-cselimCommon Report Var(flag_tree_cselim) Init(2) OptimizationTransform condition stores into unconditional ones
ftree-dceCommon Report Var(flag_tree_dce) OptimizationEnable SSA dead code elimination optimization on trees
ftree-dominator-optsCommon Report Var(flag_tree_dom) OptimizationEnable dominator optimizations
ftree-dseCommon Report Var(flag_tree_dse) OptimizationEnable dead store elimination
ftree-forwpropCommon Report Var(flag_tree_forwprop) Init(1) OptimizationEnable forward propagation on trees
ftree-freCommon Report Var(flag_tree_fre) OptimizationEnable Full Redundancy Elimination (FRE) on trees
ftree-loop-distributionCommon Report Var(flag_tree_loop_distribution) OptimizationEnable loop distribution on trees
ftree-loop-imCommon Report Var(flag_tree_loop_im) Init(1) OptimizationEnable loop invariant motion on trees
ftree-loop-ivcanonCommon Report Var(flag_tree_loop_ivcanon) Init(1) OptimizationCreate canonical induction variables in loops
ftree-loop-linearCommon Report Var(flag_tree_loop_linear) OptimizationEnable linear loop transforms on trees
ftree-loop-optimizeCommon Report Var(flag_tree_loop_optimize) Init(1) OptimizationEnable loop optimizations on tree level
ftree-lrsCommon Report Var(flag_tree_live_range_split) OptimizationPerform live range splitting during the SSA->normal pass
ftree-parallelize-loops=Common Report Joined UInteger Var(flag_tree_parallelize_loops) Init(1)Enable automatic parallelization of loops
ftree-phipropCommon Report Var(flag_tree_phiprop) Init(1) OptimizationEnable hoisting loads from conditional pointers.
ftree-preCommon Report Var(flag_tree_pre) OptimizationEnable SSA-PRE optimization on trees
ftree-ptaCommon Report Var(flag_tree_pta) Init(1) OptimizationPerform function-local points-to analysis on trees.
ftree-reassocCommon Report Var(flag_tree_reassoc) Init(1) OptimizationEnable reassociation on tree level
ftree-saliasCommonDoes nothing.  Preserved for backward compatibility.
ftree-scev-cpropCommon Report Var(flag_tree_scev_cprop) Init(1) OptimizationEnable copy propagation of scalar-evolution information.
ftree-sinkCommon Report Var(flag_tree_sink) OptimizationEnable SSA code sinking on trees
ftree-slp-vectorizeCommon Report Var(flag_tree_slp_vectorize) Init(2) OptimizationEnable basic block vectorization (SLP) on trees
ftree-sraCommon Report Var(flag_tree_sra) OptimizationPerform scalar replacement of aggregates
ftree-store-ccpCommonDoes nothing.  Preserved for backward compatibility.
ftree-store-copy-propCommonDoes nothing.  Preserved for backward compatibility.
ftree-switch-conversionCommon Report Var(flag_tree_switch_conversion) OptimizationPerform conversions of switch initializations.
ftree-terCommon Report Var(flag_tree_ter) Init(1) OptimizationReplace temporary expressions in the SSA->normal pass
ftree-vect-loop-versionCommon Report Var(flag_tree_vect_loop_version) Init(1) OptimizationEnable loop versioning when doing loop vectorization on trees
ftree-vectorizeCommon Report Var(flag_tree_vectorize) OptimizationEnable loop vectorization on trees
ftree-vectorizer-verbose=Common RejectNegative Joined-ftree-vectorizer-verbose=<number>	Set the verbosity level of the vectorizer
ftree-vrpCommon Report Var(flag_tree_vrp) Init(0) OptimizationPerform Value Range Propagation on trees
funderscoringFortranAppend underscores to externally visible names
funit-at-a-timeCommon Report Var(flag_unit_at_a_time) Init(1) OptimizationCompile whole compilation unit at a time
funittestDCompile in unittest code
funroll-all-loopsCommon Report Var(flag_unroll_all_loops) OptimizationPerform loop unrolling for all loops
funroll-loopsCommon Report Var(flag_unroll_loops) OptimizationPerform loop unrolling when iteration count is known
funsafe-loop-optimizationsCommon Report Var(flag_unsafe_loop_optimizations) OptimizationAllow loop optimizations to assume that the loops behave in normal way
funsafe-math-optimizationsCommon Report Var(flag_unsafe_math_optimizations) OptimizationAllow math optimizations that may violate IEEE or ISO standards
funsigned-bitfieldsC ObjC C++ ObjC++When \"signed\" or \"unsigned\" is not given make the bitfield unsigned
funsigned-charC ObjC C++ ObjC++ LTOMake \"char\" unsigned by default
funswitch-loopsCommon Report Var(flag_unswitch_loops) OptimizationPerform loop unswitching
funwind-tablesCommon Report Var(flag_unwind_tables) OptimizationJust generate unwind tables for exception handling
fuse-cxa-atexitC++ ObjC++Use __cxa_atexit to register destructors
fuse-cxa-get-exception-ptrC++ ObjC++Use __cxa_get_exception_ptr in exception handling
fuse-linker-pluginCommon Undocumented
fvar-trackingCommon Report Var(flag_var_tracking) VarExists OptimizationPerform variable tracking
fvar-tracking-assignmentsCommon Report Var(flag_var_tracking_assignments) VarExists OptimizationPerform variable tracking by annotating assignments
fvar-tracking-assignments-toggleCommon Report Var(flag_var_tracking_assignments_toggle) VarExists OptimizationToggle -fvar-tracking-assignments
fvar-tracking-uninitCommon Report Var(flag_var_tracking_uninit) OptimizationPerform variable tracking and also tag variables that are uninitialized
fvariable-expansion-in-unrollerCommon Report Var(flag_variable_expansion_in_unroller) OptimizationApply variable expansion when loops are unrolled
fvect-cost-modelCommon Report Var(flag_vect_cost_model) OptimizationEnable use of cost model in vectorization
fverbose-asmCommon Report Var(flag_verbose_asm)Add extra commentary to assembler output
fversionCommon
fversion=D Joined RejectNegative-fversion=<level|ident> Compile in version code >= <level> or identified by <ident>
fvisibility-inlines-hiddenC++ ObjC++Marks all inlined methods as having hidden visibility
fvisibility-ms-compatC++ ObjC++ Var(flag_visibility_ms_compat)Changes visibility to match Microsoft Visual Studio by default
fvisibility=Common Joined RejectNegative-fvisibility=[default|internal|hidden|protected]	Set the default symbol visibility
fvptCommon Report Var(flag_value_profile_transformations) OptimizationUse expression value profiles in optimizations
fvtable-gcC++ ObjC++Discard unused virtual functions
fvtable-thunksC++ ObjC++Implement vtables using thunks
fweakC++ ObjC++Emit common-like symbols as weak symbols
fwebCommon Report Var(flag_web) Init(2) OptimizationConstruct webs and split unrelated uses of single variable
fwhole-fileFortranCompile all program units at once and check all interfaces
fwhole-programCommon Report Var(flag_whole_program) Init(0) OptimizationPerform whole program optimizations
fwhoprCommon Var(flag_whopr)Enable partitioned link-time optimization.
fwide-exec-charset=C ObjC C++ ObjC++ Joined RejectNegative-fwide-exec-charset=<cset>	Convert all wide strings and character constants to character set <cset>
fworking-directoryC ObjC C++ ObjC++Generate a #line directive pointing at the current working directory
fworking-directoryFortran
fwpaLTO Report Var(flag_wpa) OptimizationRun the link-time optimizer in whole program analysis (WPA) mode.
fwrapvCommon Report Var(flag_wrapv) OptimizationAssume signed arithmetic overflow wraps around
fxrefC++ ObjC++Emit cross referencing information
fzero-initialized-in-bssCommon Report Var(flag_zero_initialized_in_bss) Init(1)Put zero initialized data in the bss section
fzero-linkObjC ObjC++Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode
gCommon JoinedOrMissingGenerate debug information in default format
gcoffCommon JoinedOrMissing Negative(gdwarf-)Generate debug information in COFF format
gdwarf-Common Joined UInteger Var(dwarf_version) Init(2) Negative(gstabs)Generate debug information in DWARF v2 (or later) format
gen-declsObjC ObjC++Dump declarations to a .decl file
ggdbCommon JoinedOrMissingGenerate debug information in default extended format
gno-strict-dwarfCommon RejectNegative Var(dwarf_strict,0) Init(-1)Emit DWARF additions beyond selected version
gstabsCommon JoinedOrMissing Negative(gstabs+)Generate debug information in STABS format
gstabs+Common JoinedOrMissing Negative(gvms)Generate debug information in extended STABS format
gstrict-dwarfCommon Report RejectNegative Var(dwarf_strict,1) VarExistsDon't emit DWARF additions beyond selected version
gtoggleCommon Report Var(flag_gtoggle)Toggle debug information generation
gvmsCommon JoinedOrMissing Negative(gxcoff)Generate debug information in VMS format
gxcoffCommon JoinedOrMissing Negative(gxcoff+)Generate debug information in XCOFF format
gxcoff+Common JoinedOrMissing Negative(gcoff)Generate debug information in extended XCOFF format
idirafterC ObjC C++ ObjC++ Joined Separate-idirafter <dir>	Add <dir> to the end of the system include path
idirafterFortran Joined Separate
imacrosC ObjC C++ ObjC++ Joined Separate-imacros <file>	Accept definition of macros in <file>
imultilibC ObjC C++ ObjC++ Joined Separate-imultilib <dir>	Set <dir> to be the multilib include subdirectory
imultilibD Joined Separate-imultilib <dir> Set <dir> to be the multilib include subdirectory
imultilibFortran Joined Separate
includeC ObjC C++ ObjC++ Joined Separate-include <file>	Include the contents of <file> before other files
iprefixC ObjC C++ ObjC++ Joined Separate-iprefix <path>	Specify <path> as a prefix for next two options
iprefixD Joined Separate-iprefix <path>	Specify <path> as a prefix for next two options
iprefixFortran Joined Separate
iquoteC ObjC C++ ObjC++ Joined Separate-iquote <dir>	Add <dir> to the end of the quote include path
iquoteFortran Joined Separate
isysrootC ObjC C++ ObjC++ Joined Separate-isysroot <dir>	Set <dir> to be the system root directory
isysrootD Joined Separate-isysroot <dir>	Set <dir> to be the system root directory
isysrootFortran Joined Separate
isystemC ObjC C++ ObjC++ Joined Separate-isystem <dir>	Add <dir> to the start of the system include path
isystemD Joined Separate-isystem <dir>	Add <dir> to the start of the system include path
isystemFortran Joined Separate
iwithprefixC ObjC C++ ObjC++ Joined Separate-iwithprefix <dir>	Add <dir> to the end of the system include path
iwithprefixbeforeC ObjC C++ ObjC++ Joined Separate-iwithprefixbefore <dir>	Add <dir> to the end of the main include path
lang-asmC Undocumented
lang-objcC ObjC C++ ObjC++ Undocumented
m32Target Report RejectNegative InverseMask(64BIT)Use 32-bit ABI
m64Target Report RejectNegative Mask(64BIT)Use 64-bit ABI
mapp-regsTarget Report Mask(APP_REGS)Use ABI reserved registers
mbig-endianTarget Report RejectNegative InverseMask(LITTLE_ENDIAN)Generate code for big-endian
mcmodel=Target RejectNegative Joined Var(sparc_cmodel_string)Use given SPARC-V9 code model
mcpu=Target RejectNegative JoinedUse features of and schedule code for given CPU
mfaster-structsTarget Report Mask(FASTER_STRUCTS)Use structs on stronger alignment for double-word copies
mfpuTarget Report Mask(FPU)Use hardware FP
mhard-floatTarget RejectNegative Mask(FPU) MaskExistsUse hardware FP
mhard-quad-floatTarget Report RejectNegative Mask(HARD_QUAD)Use hardware quad FP instructions
mimpure-textTarget ReportPass -assert pure-text to linker
mlittle-endianTarget Report RejectNegative Mask(LITTLE_ENDIAN) MaskExistsGenerate code for little-endian
mptr32Target Report RejectNegative InverseMask(PTR64)Pointers are 32-bit
mptr64Target Report RejectNegative Mask(PTR64)Pointers are 64-bit
mrelaxTargetOptimize tail call instructions in assembler and linker
msoft-floatTarget RejectNegative InverseMask(FPU)Do not use hardware FP
msoft-quad-floatTarget Report RejectNegative InverseMask(HARD_QUAD)Do not use hardware quad fp instructions
mstack-biasTarget Report Mask(STACK_BIAS)Use stack bias
mstd-struct-returnTarget Report RejectNegative Var(sparc_std_struct_return)Enable strict 32-bit psABI struct return checking.
mtune=Target RejectNegative JoinedSchedule code for given CPU
munaligned-doublesTarget Report Mask(UNALIGNED_DOUBLES)Assume possible double misalignment
mv8plusTarget Report Mask(V8PLUS)Compile for V8+ ABI
mvisTarget Report Mask(VIS)Use UltraSPARC Visual Instruction Set extensions
nocppFortran Negative(cpp)Disable preprocessing
nophoboslibDriver
nostdincC ObjC C++ ObjC++Do not search standard system include directories (those specified with -isystem will still be used)
nostdincDDo not search standard system include directories
nostdincFortran
nostdinc++C++ ObjC++Do not search standard system include directories for C++
oC ObjC C++ ObjC++ Joined Separate
oCommon Joined Separate-o <file>	Place output into <file>
oFortran Joined Separate
pCommon Var(profile_flag)Enable function profiling
pedanticC ObjC C++ ObjC++
pedanticCommon Var(pedantic)Issue warnings needed for strict compliance to the standard
pedantic-errorsC ObjC C++ ObjC++
pedantic-errorsCommonLike -pedantic but issue them as errors
pieCommon RejectNegative Negative(shared)Create a position independent executable
print-objc-runtime-infoObjC ObjC++Generate C header of platform-specific features
print-pch-checksumC ObjC C++ ObjC++Print a checksum of the executable for PCH validity checking, and stop
quietCommon Var(quiet_flag)Do not display functions compiled or elapsed time
remapC ObjC C++ ObjC++Remap file names when including files
sharedCommon RejectNegative Negative(pie)Create a shared library
static-libgfortranFortranStatically link the GNU Fortran helper library (libgfortran)
static_libphobosDriver
std=c++0xC++ ObjC++Conform to the ISO 1998 C++ standard, with extensions that are likely tobecome a part of the upcoming ISO C++ standard, dubbed C++0x. Note that theextensions enabled by this mode are experimental and may be removed infuture releases of GCC.
std=c++98C++ ObjC++Conform to the ISO 1998 C++ standard
std=c89C ObjCConform to the ISO 1990 C standard
std=c90C ObjCConform to the ISO 1990 C standard
std=c99C ObjCConform to the ISO 1999 C standard
std=c9xC ObjCDeprecated in favor of -std=c99
std=f2003FortranConform to the ISO Fortran 2003 standard
std=f2008FortranConform to the ISO Fortran 2008 standard
std=f95FortranConform to the ISO Fortran 95 standard
std=gnuFortranConform to nothing in particular
std=gnu++0xC++ ObjC++Conform to the ISO 1998 C++ standard, with GNU extensions andextensions that are likely to become a part of the upcoming ISO C++standard, dubbed C++0x. Note that the extensions enabled by this modeare experimental and may be removed in future releases of GCC.
std=gnu++98C++ ObjC++Conform to the ISO 1998 C++ standard with GNU extensions
std=gnu89C ObjCConform to the ISO 1990 C standard with GNU extensions
std=gnu90C ObjCConform to the ISO 1990 C standard with GNU extensions
std=gnu99C ObjCConform to the ISO 1999 C standard with GNU extensions
std=gnu9xC ObjCDeprecated in favor of -std=gnu99
std=iso9899:1990C ObjCConform to the ISO 1990 C standard
std=iso9899:199409C ObjCConform to the ISO 1990 C standard as amended in 1994
std=iso9899:1999C ObjCConform to the ISO 1999 C standard
std=iso9899:199xC ObjCDeprecated in favor of -std=iso9899:1999
std=legacyFortranAccept extensions to support legacy code
traditional-cppC ObjC C++ ObjC++Enable traditional preprocessing
trigraphsC ObjC C++ ObjC++-trigraphs	Support ISO C trigraphs
undefC ObjC C++ ObjC++Do not predefine system-specific and GCC-specific macros
undefFortran
vCommon C ObjC C++ ObjC++Enable verbose output
vFortran
versionCommon Var(version_flag)Display the compiler's version
wC ObjC C++ ObjC++
wCommon Var(inhibit_warnings)Suppress warnings
